[build-system]
requires = [
    "setuptools","setuptools_scm"
]
build-backend = "setuptools.build_meta"

[project]
name = "regression_model"
description = "Example regression model package from Train In Data."
authors = [ {name = "vmkuhn", email = "kuhn@kuhn-datascience.de"} ]
requires-python = ">=3.6.0"
version = "0.0.7"
urls = { url = "https://github.com/trainindata/testing-and-monitoring-ml-deployments"}
dependencies = [
    "numpy>=1.20.0,<1.21.0",
    "pandas>=1.3.5,<1.4.0",
    "pydantic>=1.8.1,<1.9.0",
    "scikit-learn>=1.0.2,<1.1.0",
    "strictyaml>=1.3.2,<1.4.0",
    "ruamel.yaml==0.16.12",
    "feature-engine>=1.0.2,<1.1.0",
    "joblib>=1.0.1,<1.1.0",
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]
#dynamic = ["version"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]  # list of folders that contain the packages (["."] by default)
include = ["regression_model*"]  # package names should match these glob patterns (["*"] by default)
exclude = ["regression_model.tests*"]  # exclude packages matching these glob patterns (empty by default)
namespaces = true  # to disable scanning PEP 420 namespaces (true by default)

[tool.setuptools.exclude-package-data]
mypkg = [".gitignore",".dockerignore","Dockerfile"]


#[tool.setuptools.dynamic]
#version = {attr= "regression_model.VERSION"}




[tool.pytest.ini_options]
minversion = "2.0"
addopts = "-rfEX -p pytester --strict-markers"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test", "Acceptance"]
python_functions = ["test"]
# NOTE: "doc" is not included here, but gets tested explicitly via "doctesting".
testpaths = ["tests"]
xfail_strict = true
filterwarnings = [
    "error",
    "default:Using or importing the ABCs:DeprecationWarning:unittest2.*",
    # produced by older pyparsing<=2.2.0.
    "default:Using or importing the ABCs:DeprecationWarning:pyparsing.*",
    "default:the imp module is deprecated in favour of importlib:DeprecationWarning:nose.*",
    # distutils is deprecated in 3.10, scheduled for removal in 3.12
    "ignore:The distutils package is deprecated:DeprecationWarning",
    # produced by python3.6/site.py itself (3.6.7 on Travis, could not trigger it with 3.6.8)."
    "ignore:.*U.*mode is deprecated:DeprecationWarning:(?!(pytest|_pytest))",
    # produced by pytest-xdist
    "ignore:.*type argument to addoption.*:DeprecationWarning",
    # produced on execnet (pytest-xdist)
    "ignore:.*inspect.getargspec.*deprecated, use inspect.signature.*:DeprecationWarning",
    # pytest's own futurewarnings
    "ignore::pytest.PytestExperimentalApiWarning",
    # Do not cause SyntaxError for invalid escape sequences in py37.
    # Those are caught/handled by pyupgrade, and not easy to filter with the
    # module being the filename (with .py removed).
    "default:invalid escape sequence:DeprecationWarning",
    # ignore use of unregistered marks, because we use many to test the implementation
    "ignore::_pytest.warning_types.PytestUnknownMarkWarning",
]

[tool.black]
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 100
lines_between_sections = 1
known_first_party = "sentry"
skip = "migrations"

